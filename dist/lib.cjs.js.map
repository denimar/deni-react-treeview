{"version":3,"file":"lib.cjs.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/deni-react-treeview-item/action-buttons/ActionButtons.tsx","../src/components/deni-react-treeview-item/DeniReactTreeviewItemConsts.ts","../src/components/deni-react-treeview-item/DeniReactTreeviewItemHelper.tsx","../src/components/deni-react-treeview-item/DeniReactTreeViewItem.tsx","../src/components/deni-react-treeview/DeniReactTreeviewApiImpl.ts","../src/components/deni-react-treeview/DeniReactTreeviewConsts.ts","../src/components/deni-react-treeview/DeniReactTreeviewHelper.ts","../src/components/deni-react-treeview/DeniReactTreeView.tsx","../src/components/deni-react-treeview/DeniReactTreeviewApi.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react'\nimport './ActionButtons.scss'\nimport { ActionButtonsProps } from './ActionButtonsProps';\n\nclass ActionButtons extends React.Component<ActionButtonsProps> {\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n\n    const actionButtons: JSX.Element[] = this.props.buttons.map((actionButton, index) => {\n      return (\n        <span\n          key={index}\n          className=\"action-button\"\n          onClick={ this.props.onActionButtonClick ? this.props.onActionButtonClick.bind(this, this.props.item, actionButton) : undefined}\n        >\n          {actionButton}\n        </span>\n      );\n    })\n\n    return (\n      <div className=\"action-buttons-container\">\n        <span className=\"action-buttons-container-text\">{this.props.item.text}</span>\n        {actionButtons}\n      </div>\n    )\n  }\n\n}\n\nexport default ActionButtons;\n","export const  CHECKBOX_STATE = {\n  CHECKED: 1,\n  UNCHECKED: 2,\n  UNDETERMINED: 3\n}\n","import React from 'react'\nimport ActionButtons from \"./action-buttons\";\nimport { CHECKBOX_STATE } from './DeniReactTreeviewItemConsts'\n\nconst isSelected = (treeview, item) => {\n  return treeview.state.selectedItem === item;\n}\n\nconst  getClassItem = (treeview, item, level, selectRow) => {\n    const classNames = ['deni-react-treeview-item-container'];\n\n    classNames.push('unselectable');\n\n    if ((item.root === true) && (treeview.props.showRoot === false)) {\n        classNames.push('hidden');\n    } else {\n        classNames.push(treeview.state.theme);\n        classNames.push('level-' + level);\n\n        if (selectRow) {\n            classNames.push('select-row');\n            if (isSelected(treeview, item)) {\n                classNames.push('selected');\n            }\n        }\n    }\n\n    return classNames.join(' ');\n}\n\nconst getClassIcon = (treeview, item) => {\n  const classNames = ['icon'];\n\n  if (treeview.props.showIcon === false) {\n    classNames.push('hidden');      \n  } else {\n    if ((item.isLeaf) && (!(item.children && item.children.length > 0))) { //when it has children, so is no longer has to be leaf\n        classNames.push('isleaf');\n    }\n\n    if (item.expanded) {\n        classNames.push('expanded');\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassExpandButton = (treeview, treeviewItem, item) => {\n  const classNames = ['expand-button'];\n\n  if (((item.children && item.children.length > 0) || (!item.isLeaf && treeview.props.lazyLoad))) {\n      classNames.push('hasChild');\n\n      if (item.expanded) {\n          classNames.push('expanded');\n      } else {\n          classNames.push('colapsed');\n      }\n  }\n\n  if (treeviewItem.state && treeviewItem.state.loading) {\n      classNames.push('loading');\n  }\n\n  if (isSelected(treeview, item)) {\n      classNames.push('selected');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassCheckbox = (treeview, item) => {\n  const classNames = ['checkbox'];\n\n  if (treeview.props.showCheckbox) {\n      if (item.state === CHECKBOX_STATE.CHECKED) {\n          classNames.push('checked');\n      } else if (item.state === CHECKBOX_STATE.UNDETERMINED) {\n          classNames.push('undetermined');\n      }\n\n      if (isSelected(treeview, item)) {\n          classNames.push('selected');\n      }\n  } else {\n      classNames.push('hidden');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassIconAndText = (treeview, item, selectRow) => {\n  const classNames = ['icon-and-text'];\n\n  if (selectRow) {\n      classNames.push('select-row');\n  }\n\n  if ((!selectRow) && (isSelected(treeview, item))) {\n      classNames.push('selected');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getInnerText = (treeview: any, item: any): JSX.Element => {\n  if (treeview.props.actionButtons) {\n      return (<ActionButtons \n        buttons={treeview.props.actionButtons}       \n        item={item}\n      />)\n  } else {\n      if (treeview.props.onRenderItem) {\n          return treeview.props.onRenderItem(item, treeview);\n      } else {\n          return item.text;\n      }\n  }\n}\n\nconst treeviewItemContainerDoubleClick = (treeviewItemExpandButtonMouseDown, treeview, selectRow, event) => {\n    /*\n  let canContinue = selectRow;\n\n  if (!canContinue) {\n      const target = event.target;\n      canContinue = ((target.classList.contains('icon-and-text')) || (target.classList.contains('icon')) || (target.classList.contains('text-inner')) || (target.classList.contains('text')));\n  }\n\n  if (canContinue) {\n      const item = this.props.item;\n      if (item.isLeaf) {\n          //TODO: Create a event here\n      } else {\n          treeviewItemExpandButtonMouseDown.apply(this, [treeview, item]);\n      }\n  }\n  */\n}\n\nconst treeviewItemContainerMouseDown = (treeview, item, selectRow, event) => {\n    debugger\n  if (treeview.state.selectedItem !== item) {\n      const target = event.target;\n      const finishRoutine = function () {\n          treeview.setState({\n              selectedItem: item,\n          });\n      };\n\n      if (selectRow) {\n          finishRoutine();\n      } else {\n          if ((target.classList.contains('icon-and-text')) || (target.classList.contains('icon')) || (target.classList.contains('text-inner')) || (target.classList.contains('text') || (target.classList.contains('action-buttons-container-text')))) {\n              finishRoutine();\n          }\n      }\n\n      if (treeview.props.onSelectItem) {\n          const shouldFireEvent = (treeview.props.selectRow && event.target.classList.contains('deni-react-treeview-item-container')) ||\n              (!treeview.props.selectRow && event.target.classList.contains('text-inner'))\n\n\n          if (shouldFireEvent) {\n              treeview.props.onSelectItem(item);\n          }\n      }\n  }\n}\n\nconst treeviewItemExpandButtonMouseDown = (treeview, item) => {\n    debugger\n  const conclusion = () => {\n      item.expanded = !item.expanded;\n      treeview.setState({\n          selectedItem: item,\n      });\n      treeview.setState({\n          loading: false,\n      });\n  };\n  const resolveEventOnColapsed = () => {\n      if (treeview.props.onColapsed) {\n          treeview.props.onColapsed(item)\n      }\n  };\n  const resolveEventOnExpanded = () => {\n      if (treeview.props.onExpanded) {\n          treeview.props.onExpanded(item)\n      }\n  };\n\n  if (item.expanded) {\n      conclusion();\n      resolveEventOnColapsed();\n  } else {\n      if (treeview.props.lazyLoad) {\n        treeview.setState({ loading: true });\n\n          if (treeview.props.lazyLoad && treeview.props.onLazyLoad) {\n              treeview.props.onLazyLoad(item, (children) => {\n                  treeview.api.loadData(treeview, children, item);\n                  conclusion();\n              });\n          } else {\n              treeview.api.load(treeview, item).then(function () {\n                  conclusion();\n              })\n          }\n\n      } else {\n          conclusion();\n      }\n\n      resolveEventOnExpanded();\n  }\n}\n\nconst treeviewItemCheckboxMouseDown = (treeviewItem, item) => {\n  const resolveEventOnChecked = () => {\n      if (treeviewItem.props.onCheckItem) {\n        treeviewItem.props.onCheckItem(item)\n      }\n  };\n\n  if (_isChecked(item)) {\n      _uncheckNode(treeviewItem, item);\n  } else {\n      _checkNode(treeviewItem, item);\n  }\n\n  treeviewItem.setState({\n      selectedItem: item,\n  });\n\n  resolveEventOnChecked();\n}\n\nconst _checkNode = (treeviewItem, item) => {\n  item.state = CHECKBOX_STATE.CHECKED;\n  _refreshCheckboxStateChildren(item);\n  _refreshCheckboxStateParents(treeviewItem);\n}\n\nconst _uncheckNode = (treeviewItem, item) => {\n  item.state = CHECKBOX_STATE.UNCHECKED;\n  _refreshCheckboxStateChildren(item);\n  _refreshCheckboxStateParents(treeviewItem);\n}\n\nconst _refreshCheckboxStateChildren = item => {\n  if (item.children) {\n      item.children.forEach(function (child) {\n          child.state = item.state;\n          _refreshCheckboxStateChildren(child);\n      });\n  }\n}\n\nconst _allItemsAreChecked = items => {\n  for (let index = 0; index < items.length; index++) {\n      const item = items[index];\n\n      if (!_isChecked(item)) {\n          return false;\n      }\n  }\n  return true;\n}\n\nconst _allItemsAreUnchecked = items => {\n  for (let index = 0; index < items.length; index++) {\n      const item = items[index];\n\n      if (!_isUnchecked(item)) {\n          return false;\n      }\n  }\n  return true;\n}\n\nconst _refreshCheckboxStateParents = treeviewItem => {\n  const parentTreeviewItem = treeviewItem.props.parent;\n  if (parentTreeviewItem) {\n      const siblingItems = parentTreeviewItem.props.item.children;\n      const allSiblingsAreChecked = _allItemsAreChecked(siblingItems);\n\n      //\n      if (allSiblingsAreChecked) {\n          parentTreeviewItem.props.item.state = CHECKBOX_STATE.CHECKED;\n      } else {\n          const allSiblingsAreUnchecked = _allItemsAreUnchecked(siblingItems);\n          if (allSiblingsAreUnchecked) {\n              parentTreeviewItem.props.item.state = CHECKBOX_STATE.UNCHECKED;\n          } else {\n              parentTreeviewItem.props.item.state = CHECKBOX_STATE.UNDETERMINED;\n          }\n      }\n\n\n      _refreshCheckboxStateParents(parentTreeviewItem);\n\n  }\n}\n\nconst _isChecked = item => {\n  return item.state === CHECKBOX_STATE.CHECKED;\n}\n\nconst _isUnchecked = item => {\n  return item.state === CHECKBOX_STATE.UNCHECKED;\n}\n\nexport {\n  getClassItem,\n  getClassIcon,\n  getClassExpandButton,\n  getClassCheckbox,\n  getClassIconAndText,\n  getInnerText,\n  treeviewItemContainerDoubleClick,\n  treeviewItemContainerMouseDown,\n  treeviewItemExpandButtonMouseDown,\n  treeviewItemCheckboxMouseDown\n}","import React from 'react';\nimport './DeniReactTreeViewItem.scss'\n\nimport { \n  getClassItem, \n  getClassIcon, \n  getClassExpandButton, \n  getClassCheckbox, \n  getClassIconAndText,\n  getInnerText,\n  treeviewItemContainerDoubleClick,\n  treeviewItemContainerMouseDown,\n  treeviewItemExpandButtonMouseDown,\n  treeviewItemCheckboxMouseDown\n} from './DeniReactTreeviewItemHelper'\nimport { DeniReactTreeviewItemProps } from './DeniReactTreeViewItemProps';\n\n\nclass DeniReactTreeViewItem extends React.Component<DeniReactTreeviewItemProps> {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { treeview, item, level, selectRow } = this.props\n\n    const marginLeft = 5;\n    const marginLeftPropValue = treeview.props['marginItems'] || 30\n    const marginLeftItems: number = level === 0 ? 0 : (treeview.props['showRoot'] ? level * marginLeftPropValue : (level - 1) * marginLeftPropValue);\n    const cssStyle: any = {\n      paddingLeft: (marginLeft + marginLeftItems) + 'px',\n    }\n    if (!treeview.props['showRoot'] && this.props.root) {\n      cssStyle.display = 'none';\n    }\n\n    return (\n      <div \n        style={cssStyle} \n        className={getClassItem(treeview, item, level, selectRow)} \n        onMouseDown={treeviewItemContainerMouseDown.bind(this, this.props.treeview, item, selectRow)} \n        onDoubleClick={treeviewItemContainerDoubleClick.bind(this, treeviewItemExpandButtonMouseDown, this.props.treeview, selectRow)}\n      >\n        <div \n          className={getClassExpandButton(treeview, this, item)} \n          onMouseDown={treeviewItemExpandButtonMouseDown.bind(this, this.props.treeview, item)}\n        />\n\n        <div \n          className={getClassCheckbox(treeview, item)} \n          onMouseDown={treeviewItemCheckboxMouseDown.bind(this, this.props.treeview, item)}\n        />\n\n        <div className={getClassIconAndText(treeview, item, selectRow)}>\n          <div className={getClassIcon(treeview, item)}></div>\n          <div className=\"text\">\n            <span className=\"text-inner\">{getInnerText(treeview, item)}</span>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default DeniReactTreeViewItem;\n","\nclass DeniReactTreeviewApiImpl {\n\n  static addItem = (scope, text, isLeaf, parentNode) => {\n    const parent = parentNode || scope.state.selectedItem || scope.state.rootItem;\n    if (!parent) {\n      throw new Error('You must specify a parent node!');\n    }\n    const newItem = {\n      text: text,\n      children: [],\n      isLeaf: isLeaf,\n    }\n    parent.children = parent.children || [];\n    parent.children.push(newItem);\n    parent.expanded = true;\n    _selectNode(scope, newItem);\n\n    return newItem;\n  }\n\n  static findFolder = (scope, folderToFind) => {\n    const dataToFind = _normalizeDataToFind(folderToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node || dataToFind['isLeaf'] === true) {\n      throw new Error('Folder not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findItem = (scope, itemToFind) => {\n    const dataToFind = _normalizeDataToFind(itemToFind);\n    dataToFind['isLeaf'] = true;\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Item not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findNode = (scope, nodeToFind) => {\n    const dataToFind = _normalizeDataToFind(nodeToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Node not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static expandAll = (scope) => {\n    _expand(scope.state.rootItem);\n  }\n\n  static getItems = (scope) => {\n    return scope.state.rootItem.children || [];\n  }\n  \n  static getParentNode = (scope, item) => {\n    const currentItem = item || scope.state.selectedItem;\n    return _getParentItem(scope, currentItem);\n  }\n\n  static getRootItem = (scope) => {\n    return scope.state.rootItem;\n  }\n\n  static getSelectedItem = (scope) => {\n    return scope.state.selectedItem;\n  }\n\n  static removeItem = (scope, id) => {\n    const node = scope.api.findNode(id);\n    const parentNode = _getParentItem(scope, node);\n    const childIndex = parentNode.children.findIndex((child) => {\n      return child.id === node.id;\n    });\n\n    parentNode.children.splice(childIndex, 1);\n\n    if (scope.state.selectedItem && scope.state.selectedItem.id === id) {\n      scope.setState({\n        selectedItem: undefined,\n      });\n    }\n\n    scope.forceUpdate();\n  }\n\n  static selectItem = (scope, itemToFind) => {\n    const item = scope.api.findNode(itemToFind);\n    if (item) {\n      _selectNode(scope, item);\n    } else {\n      throw new Error('Item not found.');\n    }\n  }\n\n}\n\nfunction _findNode(children, dataToFind) {\n  const keys = dataToFind ? Object.keys(dataToFind) : []\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    let allFieldsAreEqual = true;\n\n    for (let index2 = 0; index2 < keys.length; index2++) {\n      const key = keys[index2];\n\n      if (child[key] !== dataToFind[key]) {\n        allFieldsAreEqual = false;\n      }\n    }\n\n    if (allFieldsAreEqual) {\n      return child;\n    }\n\n    if (child.children) {\n      const searchInChildren = _findNode(child.children, dataToFind);\n      if (searchInChildren) {\n        return searchInChildren;\n      }\n    }\n  }\n  return null;\n}\n\n//\nfunction _getParentItems(scope, item) {\n  const parents: any[] = [];\n  let currentItem = item;\n  while (true) {\n    currentItem = _getParentItem(scope, currentItem);\n    if (currentItem) {\n      if ((currentItem.root) && (!scope.props.showRoot)) {\n        break;\n      } else {\n        parents.push(currentItem);\n      }\n    } else {\n      break;\n    }\n  }\n  return parents;\n}\n\n//\nfunction _getParentItem(scope, item, parentItem?) {\n  const parent = parentItem || scope.state.rootItem;\n  const itemsToFind = parent.children;\n  for (let index = 0; index < itemsToFind.length; index++) {\n    const itemToFind = itemsToFind[index];\n    if (itemToFind.id === item.id) {\n      return parent;\n    }\n    if (itemToFind.children) {\n      const parent2 = _getParentItem(scope, item, itemToFind);\n      if (parent2) {\n        return parent2;\n      }\n    }\n  }\n  // if (item.parent === scope.state.rootItem.id) {\n  //   if (scope.props.showRoot) {\n  //     return scope.state.rootItem;\n  //   } else {\n  //     return undefined;\n  //   }\n  // } else {\n  //   let parentItem = vm.findFolder(scope, item.parent);\n  //   return parentItem;\n  // }\n}\n\n//\nfunction _normalizeDataToFind(dataToFind) {\n  let normalizedData = {};\n  if ((typeof dataToFind === 'number') || (typeof dataToFind === 'string')) {\n    normalizedData['id'] = dataToFind;\n  } else if (typeof dataToFind === 'object') {\n    normalizedData = dataToFind;\n  } else {\n    throw new Error('Parameter set in a wrong way.');\n  }\n  return normalizedData;\n}\n\n//\nfunction _selectNode(scope, item) {\n  const parentItems = _getParentItems(scope, item);\n  parentItems.forEach(function (parent) {\n    if (!parent.expanded) {\n      parent.expanded = true;\n    }\n  });\n  scope.setState({\n    selectedItem: item,\n  });\n  setTimeout(() => {\n    if (scope.container) {\n      let selectedRowElem\n      if (scope.props.selectRow) {\n        selectedRowElem = scope.container.querySelector('.deni-react-treeview-item-container.selected')\n      } else {\n        const selectedElem = scope.container.querySelector('.icon-and-text.selected')\n        if (selectedElem) {\n          selectedRowElem = selectedElem.closest('.deni-react-treeview-item-container')\n        }\n      }\n      if (selectedRowElem) {\n        selectedRowElem.scrollIntoViewIfNeeded()\n      }\n    }\n  })\n  if (scope.props.onSelectItem) {\n    scope.props.onSelectItem(item);\n  }\n}\n\nfunction _expand(item) {\n  if (item.children) {\n    item.children.forEach((i) => {\n      if (i.children) {\n        i.expanded = true;\n        _expand(i);\n      }\n    });\n  }\n}\n\n\nexport default DeniReactTreeviewApiImpl","export const  ROOT_ITEM = {\n  id: -1,\n  text: 'root',\n  expanded: true,\n  root: true\n}","import {ROOT_ITEM} from './DeniReactTreeviewConsts'\nimport axios from 'axios';\n\nconst loadingSetup = treeview => {\n  //by props.url\n  if (treeview.props.url || treeview.props.json || treeview.props.lazyLoad) {\n    if (treeview.props.autoLoad !== false) {\n      treeview.api.load(treeview);\n    }\n  } else {\n    //by props.items\n    if (treeview.props.items) {\n      treeview.api.loadData(treeview, treeview.props.items);\n    }\n  }\n}\n\nconst setTheme = (treeview, newTheme) => {\n  // const theme = newTheme || 'classic';\n  // require('../styles/themes/' + theme + '-theme.scss')\n  // treeview.setState({ theme });\n}\n\nconst load = (treeview, item) => {\n  treeview.setState({\n    loading: true\n  });\n\n  return new Promise(function(success, reject) {\n\n    if (treeview.props.url || treeview.props.json) {\n      let urlToLoad = treeview.props.url || treeview.props.json;\n      if (treeview.props.lazyLoad) {\n        const currentItem = item || treeview.state.rootItem || ROOT_ITEM;\n        delete currentItem['children'];\n        urlToLoad += '?lazyLoad=true&item=' + JSON.stringify(currentItem);\n      }\n\n      axios.get(urlToLoad)\n        .then(res => {\n          treeview.setState({\n            loading: false\n          });\n          treeview.api.loadData(treeview, res.data, item);\n          success(res.data);\n        })\n        .catch(error => {\n          console.error(`Error loading data: ${error.message}`)\n        })\n    } else if (treeview.props.lazyLoad) {\n      treeview.setState({\n        loading: false\n      });\n      reject('TODO: under construction');\n    } else {\n      treeview.setState({\n        loading: false\n      });\n      const msg = 'To use load function you must define lazyLoad:true or a valid url.';\n      console.error(msg);\n      reject(msg);\n    }\n  });\n}\n\n//\n// item is a optional param that when it is set data must be an array (children)\n//\nconst loadData = (treeview, data, item) => {\n  //\n  const dataToLoad = data || [];\n\n  //onBeforeLoad event\n  if (treeview.props.onBeforeLoad) {\n    treeview.props.onBeforeLoad(dataToLoad, item);\n  }\n\n  //\n  if (item) {\n    //\n    if (dataToLoad instanceof Array) {\n      item.children = dataToLoad;\n    } else {\n      throw new Error('When item param is set the data must be an array.');\n    }\n  } else {\n    treeview.setState({\n      rootItem: _resolveRootItem(dataToLoad)\n    });\n  }\n\n  //onAfterLoad event\n  if (treeview.props.onAfterLoad) {\n    treeview.props.onAfterLoad(dataToLoad, item);\n  }\n\n}\n\nfunction _resolveRootItem(items) {\n  let rootItem = Object.assign({}, ROOT_ITEM);\n\n  if (items) {\n    if (items instanceof Array) {\n      rootItem['children'] = items;\n    } else if (items instanceof Object) {\n      rootItem = items;\n    } else {\n      throw new Error('Parameter \"items\" adjusted in a wrong way.');\n    }\n    return rootItem;\n  }\n  return null;\n}\n\nexport {\n  loadingSetup,\n  setTheme,\n  load,\n  loadData\n}","import React from 'react';\nimport './DeniReactTreeView.scss'\nimport DeniReactTreeViewItem from '../deni-react-treeview-item/DeniReactTreeViewItem'\nimport { deniReactTreeviewApi } from './DeniReactTreeviewApi'\nimport { loadingSetup, setTheme } from './DeniReactTreeviewHelper'\nimport { DeniReactTreeviewProps } from './DeniReactTreeviewProps';\n\n\ninterface DeniReactTreeviewState {\n  loading: boolean,  \n  theme: string,\n  expandAll?: boolean,\n}\n\nclass DeniReactTreeView extends React.Component<DeniReactTreeviewProps, DeniReactTreeviewState> {\n  api: any;\n  container: any;\n\n  constructor(props: DeniReactTreeviewProps) {\n    super(props);\n    this.state = {\n      loading: false,\n      theme: props.theme || 'classic',\n      expandAll: props.expandAll,\n    };\n    this.expandAllFinished = this.expandAllFinished.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { items } = this.props;\n    const rootItem = this.api.getRootItem()\n    if (prevProps.items !== items) {\n      rootItem.children = items;\n      //treeviewHelper.loadData.call(this, this.props.items);\n    }\n    if (prevState.rootItem !== rootItem && this.state.expandAll) {\n      this.expandAllFinished();\n    }\n  }\n\n  componentDidMount() {\n    this.api = deniReactTreeviewApi(this);\n    setTheme(this, this.props.theme || 'classic');\n    loadingSetup(this);\n  }\n\n  expandAllFinished() {\n    this.setState({ expandAll: false });\n  }\n\n  render() {\n    const rootItem = this.api ? this.api.getRootItem() : undefined\n    const domTreeviewItem = (<DeniReactTreeViewItem root={true} treeview={this} level={0} item={rootItem} />);\n    let children = rootItem && rootItem.children;\n    if (children && children.length === 0) {\n      if (this.props.items && this.props.items.length > 0) {\n        children = this.props.items;\n      }\n    }\n    let className = 'deni-react-treeview-container unselectable ' + this.state.theme;\n    if (this.props.className) {\n      className += ' ' + this.props.className;\n    }\n    const hasItems = (children !== undefined && children.length > 0);\n    if (this.state.loading && (!this.props.lazyLoad || !hasItems)) {\n      className += ' loading';\n    }\n    const showComponent = hasItems && (!this.state.loading || this.props.lazyLoad);\n    const style = this.props.style || undefined\n\n    return (\n      (showComponent) ? (\n        <div ref={(elem) => this.container = elem} className={className} style={style} >\n          {domTreeviewItem}\n          {_createComponentsChildren(this, domTreeviewItem, 1, children, this.state.expandAll)}\n        </div>\n      ) : <div className={className}></div>\n    )\n  }\n\n}\n\n//DeniReactTreeView.propTypes = treeviewProps.propTypes;\n//DeniReactTreeView.defaultProps = treeviewProps.defaultProps;\n\nfunction _createComponentsChildren(treeview, parent, level, children, expandAll = false) {\n  if (expandAll) {\n    children = children.map(c => {\n      c.expanded = true;\n      return c;\n    });\n  }\n  return (\n    <div>\n      {\n        (parent.props.item && parent.props.item.expanded && children && children.length) ?\n          children.map(function (child) {\n            const domTreeviewItem = <DeniReactTreeViewItem expandAll={expandAll} treeview={treeview} parent={parent} level={level} key={child.id} item={child} />;\n            return (\n              <div key={child.id}>\n                {domTreeviewItem}\n                {_createComponentsChildren(treeview, domTreeviewItem, level + 1, child.children)}\n              </div>\n            )\n          })\n          : undefined\n      }\n    </div>\n  );\n}\n\nexport default DeniReactTreeView;\n","import DeniReactTreeviewApiImpl from './DeniReactTreeviewApiImpl'\nimport { load, loadData, setTheme } from './DeniReactTreeviewHelper'\n\nconst deniReactTreeviewApi = scope => {\n  return {\n\n    //\n    //\n    //\n    addItem: (text, isLeaf, parentNode) => {\n      return DeniReactTreeviewApiImpl.addItem(scope, text, isLeaf, parentNode);\n    },\n\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findFolder: (folderToFind) => {\n      return DeniReactTreeviewApiImpl.findFolder(scope, folderToFind);\n    },\n\n    //\n    // Expand all the children from the rootItem recursively\n    expandAll: () => {\n      DeniReactTreeviewApiImpl.expandAll(scope);\n    },\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findNode: (nodeToFind) => {\n      return DeniReactTreeviewApiImpl.findNode(scope, nodeToFind);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findItem(357) //357 is a id value or\n    //  treeviewEl.api.findItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    findItem: (itemToFind) => {\n      return DeniReactTreeviewApiImpl.findItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    getItems: () => {\n      return DeniReactTreeviewApiImpl.getItems(scope);\n    },\n\n    //\n    //\n    //\n    getParentNode: (item) => {\n      return DeniReactTreeviewApiImpl.getParentNode(scope, item);\n    },\n\n\n    //\n    //\n    //\n    getRootItem: () => {\n      return DeniReactTreeviewApiImpl.getRootItem(scope);\n    },\n\n    //\n    //\n    //\n    getSelectedItem: () => {\n      return DeniReactTreeviewApiImpl.getSelectedItem(scope);\n    },\n\n    //\n    //\n    //\n    load: load.bind(scope),\n\n    //\n    //\n    //\n    loadData: loadData.bind(scope),\n\n    //\n    //\n    //\n    removeItem: (id) => {\n      DeniReactTreeviewApiImpl.removeItem(scope, id);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.selectItem(357) //357 is a id value or\n    //  treeviewEl.api.selectItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    selectItem: (itemToFind) => {\n      DeniReactTreeviewApiImpl.selectItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    setTheme: (newTheme) => {\n      setTheme(scope, newTheme);\n    },\n\n  }\n\n}\n\nexport {\n  deniReactTreeviewApi\n}"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","props","_super","__extends","ActionButtons","actionButtons","this","buttons","map","actionButton","index","React","key","className","onClick","_this","onActionButtonClick","bind","item","undefined","text","Component","CHECKBOX_STATE","isSelected","treeview","state","selectedItem","getClassItem","level","selectRow","classNames","push","root","showRoot","theme","join","getClassIcon","showIcon","children","length","expanded","getClassExpandButton","treeviewItem","isLeaf","lazyLoad","loading","getClassCheckbox","showCheckbox","getClassIconAndText","treeviewItemContainerDoubleClick","treeviewItemExpandButtonMouseDown","event","treeviewItemContainerMouseDown","target","finishRoutine","setState","classList","contains","onSelectItem","conclusion","onColapsed","onLazyLoad","api","loadData","load","then","onExpanded","treeviewItemCheckboxMouseDown","_isChecked","_uncheckNode","_checkNode","onCheckItem","_refreshCheckboxStateChildren","_refreshCheckboxStateParents","forEach","child","parentTreeviewItem","parent","siblingItems","items","_allItemsAreChecked","allSiblingsAreUnchecked","_isUnchecked","_allItemsAreUnchecked","DeniReactTreeViewItem","_a","marginLeftPropValue","cssStyle","paddingLeft","display","onMouseDown","onDoubleClick","onRenderItem","getInnerText","DeniReactTreeviewApiImpl","scope","parentNode","rootItem","Error","newItem","_selectNode","folderToFind","dataToFind","_normalizeDataToFind","node","_findNode","itemToFind","nodeToFind","_expand","i","_getParentItem","id","findNode","childIndex","findIndex","splice","forceUpdate","keys","Object","allFieldsAreEqual","index2","searchInChildren","parentItem","itemsToFind","parent2","normalizedData","parents","currentItem","_getParentItems","setTimeout","container","selectedRowElem","querySelector","selectedElem","closest","scrollIntoViewIfNeeded","ROOT_ITEM","Promise","success","reject","url","json","urlToLoad","JSON","stringify","axios","get","res","data","catch","error","console","message","msg","dataToLoad","onBeforeLoad","Array","_resolveRootItem","onAfterLoad","assign","expandAll","expandAllFinished","DeniReactTreeView","prevProps","prevState","getRootItem","addItem","findFolder","findItem","getItems","getParentNode","getSelectedItem","removeItem","selectItem","setTheme","newTheme","autoLoad","domTreeviewItem","hasItems","showComponent","elem","_createComponentsChildren","c"],"mappings":"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"}