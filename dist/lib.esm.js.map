{"version":3,"file":"lib.esm.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/deni-react-treeview-item/action-buttons/ActionButtons.tsx","../src/components/deni-react-treeview-item/DeniReactTreeviewItemConsts.ts","../src/components/deni-react-treeview/DeniReactTreeviewApiImpl.ts","../src/components/deni-react-treeview/DeniReactTreeviewConsts.ts","../src/components/deni-react-treeview/DeniReactTreeviewHelper.ts","../src/components/deni-react-treeview/DeniReactTreeviewApi.ts","../src/components/deni-react-treeview/DeniReactTreeView.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react'\nimport './ActionButtons.scss'\nimport { ActionButtonsProps } from './ActionButtonsProps';\n\nclass ActionButtons extends React.Component<ActionButtonsProps> {\n\n  render() {\n    return (\n      <div className=\"action-buttons-container\">\n        dfddfdfgsfgsd\n      </div>\n    )\n  }\n\n}\n\nexport default ActionButtons;\n\n/*\nclass ActionButtons extends React.Component<ActionButtonsProps> {\n\n  constructor(props) {\n    super(props)\n  }\n\n  render() {\n\n    const actionButtons: JSX.Element[] = this.props.buttons.map((actionButton, index) => {\n      return (\n        <span\n          key={index}\n          className=\"action-button\"\n          onClick={ this.props.onActionButtonClick ? this.props.onActionButtonClick.bind(this, this.props.item, actionButton) : undefined}\n        >\n          {actionButton}\n        </span>\n      );\n    })\n\n    return (\n      <div className=\"action-buttons-container\">\n        <span className=\"action-buttons-container-text\">{this.props.item.text}</span>\n        {actionButtons}\n      </div>\n    )\n  }\n\n}\n\nexport default ActionButtons;\n*/","export const  CHECKBOX_STATE = {\n  CHECKED: 1,\n  UNCHECKED: 2,\n  UNDETERMINED: 3\n}\n","\nclass DeniReactTreeviewApiImpl {\n\n  static addItem = (scope, text, isLeaf, parentNode) => {\n    const parent = parentNode || scope.state.selectedItem || scope.state.rootItem;\n    if (!parent) {\n      throw new Error('You must specify a parent node!');\n    }\n    const newItem = {\n      text: text,\n      children: [],\n      isLeaf: isLeaf,\n    }\n    parent.children = parent.children || [];\n    parent.children.push(newItem);\n    parent.expanded = true;\n    _selectNode(scope, newItem);\n\n    return newItem;\n  }\n\n  static findFolder = (scope, folderToFind) => {\n    const dataToFind = _normalizeDataToFind(folderToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node || dataToFind['isLeaf'] === true) {\n      throw new Error('Folder not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findItem = (scope, itemToFind) => {\n    const dataToFind = _normalizeDataToFind(itemToFind);\n    dataToFind['isLeaf'] = true;\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Item not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findNode = (scope, nodeToFind) => {\n    const dataToFind = _normalizeDataToFind(nodeToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Node not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static expandAll = (scope) => {\n    _expand(scope.state.rootItem);\n  }\n\n  static getItems = (scope) => {\n    return scope.state.rootItem.children || [];\n  }\n  \n  static getParentNode = (scope, item) => {\n    const currentItem = item || scope.state.selectedItem;\n    return _getParentItem(scope, currentItem);\n  }\n\n  static getRootItem = (scope) => {\n    return scope.state.rootItem;\n  }\n\n  static getSelectedItem = (scope) => {\n    return scope.state.selectedItem;\n  }\n\n  static removeItem = (scope, id) => {\n    const node = scope.api.findNode(id);\n    const parentNode = _getParentItem(scope, node);\n    const childIndex = parentNode.children.findIndex((child) => {\n      return child.id === node.id;\n    });\n\n    parentNode.children.splice(childIndex, 1);\n\n    if (scope.state.selectedItem && scope.state.selectedItem.id === id) {\n      scope.setState({\n        selectedItem: undefined,\n      });\n    }\n\n    scope.forceUpdate();\n  }\n\n  static selectItem = (scope, itemToFind) => {\n    const item = scope.api.findNode(itemToFind);\n    if (item) {\n      _selectNode(scope, item);\n    } else {\n      throw new Error('Item not found.');\n    }\n  }\n\n}\n\nfunction _findNode(children, dataToFind) {\n  const keys = dataToFind ? Object.keys(dataToFind) : []\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    let allFieldsAreEqual = true;\n\n    for (let index2 = 0; index2 < keys.length; index2++) {\n      const key = keys[index2];\n\n      if (child[key] !== dataToFind[key]) {\n        allFieldsAreEqual = false;\n      }\n    }\n\n    if (allFieldsAreEqual) {\n      return child;\n    }\n\n    if (child.children) {\n      const searchInChildren = _findNode(child.children, dataToFind);\n      if (searchInChildren) {\n        return searchInChildren;\n      }\n    }\n  }\n  return null;\n}\n\n//\nfunction _getParentItems(scope, item) {\n  const parents: any[] = [];\n  let currentItem = item;\n  while (true) {\n    currentItem = _getParentItem(scope, currentItem);\n    if (currentItem) {\n      if ((currentItem.root) && (!scope.props.showRoot)) {\n        break;\n      } else {\n        parents.push(currentItem);\n      }\n    } else {\n      break;\n    }\n  }\n  return parents;\n}\n\n//\nfunction _getParentItem(scope, item, parentItem?) {\n  const parent = parentItem || scope.state.rootItem;\n  const itemsToFind = parent.children;\n  for (let index = 0; index < itemsToFind.length; index++) {\n    const itemToFind = itemsToFind[index];\n    if (itemToFind.id === item.id) {\n      return parent;\n    }\n    if (itemToFind.children) {\n      const parent2 = _getParentItem(scope, item, itemToFind);\n      if (parent2) {\n        return parent2;\n      }\n    }\n  }\n  // if (item.parent === scope.state.rootItem.id) {\n  //   if (scope.props.showRoot) {\n  //     return scope.state.rootItem;\n  //   } else {\n  //     return undefined;\n  //   }\n  // } else {\n  //   let parentItem = vm.findFolder(scope, item.parent);\n  //   return parentItem;\n  // }\n}\n\n//\nfunction _normalizeDataToFind(dataToFind) {\n  let normalizedData = {};\n  if ((typeof dataToFind === 'number') || (typeof dataToFind === 'string')) {\n    normalizedData['id'] = dataToFind;\n  } else if (typeof dataToFind === 'object') {\n    normalizedData = dataToFind;\n  } else {\n    throw new Error('Parameter set in a wrong way.');\n  }\n  return normalizedData;\n}\n\n//\nfunction _selectNode(scope, item) {\n  const parentItems = _getParentItems(scope, item);\n  parentItems.forEach(function (parent) {\n    if (!parent.expanded) {\n      parent.expanded = true;\n    }\n  });\n  scope.setState({\n    selectedItem: item,\n  });\n  setTimeout(() => {\n    if (scope.container) {\n      let selectedRowElem\n      if (scope.props.selectRow) {\n        selectedRowElem = scope.container.querySelector('.deni-react-treeview-item-container.selected')\n      } else {\n        const selectedElem = scope.container.querySelector('.icon-and-text.selected')\n        if (selectedElem) {\n          selectedRowElem = selectedElem.closest('.deni-react-treeview-item-container')\n        }\n      }\n      if (selectedRowElem) {\n        selectedRowElem.scrollIntoViewIfNeeded()\n      }\n    }\n  })\n  if (scope.props.onSelectItem) {\n    scope.props.onSelectItem(item);\n  }\n}\n\nfunction _expand(item) {\n  if (item.children) {\n    item.children.forEach((i) => {\n      if (i.children) {\n        i.expanded = true;\n        _expand(i);\n      }\n    });\n  }\n}\n\n\nexport default DeniReactTreeviewApiImpl","export const  ROOT_ITEM = {\n  id: -1,\n  text: 'root',\n  expanded: true,\n  root: true\n}","import {ROOT_ITEM} from './DeniReactTreeviewConsts'\nimport axios from 'axios';\n\nconst loadingSetup = treeview => {\n  //by props.url\n  if (treeview.props.url || treeview.props.json || treeview.props.lazyLoad) {\n    if (treeview.props.autoLoad !== false) {\n      treeview.api.load(treeview);\n    }\n  } else {\n    //by props.items\n    if (treeview.props.items) {\n      treeview.api.loadData(treeview, treeview.props.items);\n    }\n  }\n}\n\nconst setTheme = (treeview, newTheme) => {\n  // const theme = newTheme || 'classic';\n  // require('../styles/themes/' + theme + '-theme.scss')\n  // treeview.setState({ theme });\n}\n\nconst load = (treeview, item) => {\n  treeview.setState({\n    loading: true\n  });\n\n  return new Promise(function(success, reject) {\n\n    if (treeview.props.url || treeview.props.json) {\n      let urlToLoad = treeview.props.url || treeview.props.json;\n      if (treeview.props.lazyLoad) {\n        const currentItem = item || treeview.state.rootItem || ROOT_ITEM;\n        delete currentItem['children'];\n        urlToLoad += '?lazyLoad=true&item=' + JSON.stringify(currentItem);\n      }\n\n      axios.get(urlToLoad)\n        .then(res => {\n          treeview.setState({\n            loading: false\n          });\n          treeview.api.loadData(treeview, res.data, item);\n          success(res.data);\n        })\n        .catch(error => {\n          console.error(`Error loading data: ${error.message}`)\n        })\n    } else if (treeview.props.lazyLoad) {\n      treeview.setState({\n        loading: false\n      });\n      reject('TODO: under construction');\n    } else {\n      treeview.setState({\n        loading: false\n      });\n      const msg = 'To use load function you must define lazyLoad:true or a valid url.';\n      console.error(msg);\n      reject(msg);\n    }\n  });\n}\n\n//\n// item is a optional param that when it is set data must be an array (children)\n//\nconst loadData = (treeview, data, item) => {\n  //\n  const dataToLoad = data || [];\n\n  //onBeforeLoad event\n  if (treeview.props.onBeforeLoad) {\n    treeview.props.onBeforeLoad(dataToLoad, item);\n  }\n\n  //\n  if (item) {\n    //\n    if (dataToLoad instanceof Array) {\n      item.children = dataToLoad;\n    } else {\n      throw new Error('When item param is set the data must be an array.');\n    }\n  } else {\n    treeview.setState({\n      rootItem: _resolveRootItem(dataToLoad)\n    });\n  }\n\n  //onAfterLoad event\n  if (treeview.props.onAfterLoad) {\n    treeview.props.onAfterLoad(dataToLoad, item);\n  }\n\n}\n\nfunction _resolveRootItem(items) {\n  let rootItem = Object.assign({}, ROOT_ITEM);\n\n  if (items) {\n    if (items instanceof Array) {\n      rootItem['children'] = items;\n    } else if (items instanceof Object) {\n      rootItem = items;\n    } else {\n      throw new Error('Parameter \"items\" adjusted in a wrong way.');\n    }\n    return rootItem;\n  }\n  return null;\n}\n\nexport {\n  loadingSetup,\n  setTheme,\n  load,\n  loadData\n}","import DeniReactTreeviewApiImpl from './DeniReactTreeviewApiImpl'\nimport { load, loadData, setTheme } from './DeniReactTreeviewHelper'\n\nconst deniReactTreeviewApi = scope => {\n  return {\n\n    //\n    //\n    //\n    addItem: (text, isLeaf, parentNode) => {\n      return DeniReactTreeviewApiImpl.addItem(scope, text, isLeaf, parentNode);\n    },\n\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findFolder: (folderToFind) => {\n      return DeniReactTreeviewApiImpl.findFolder(scope, folderToFind);\n    },\n\n    //\n    // Expand all the children from the rootItem recursively\n    expandAll: () => {\n      DeniReactTreeviewApiImpl.expandAll(scope);\n    },\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findNode: (nodeToFind) => {\n      return DeniReactTreeviewApiImpl.findNode(scope, nodeToFind);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findItem(357) //357 is a id value or\n    //  treeviewEl.api.findItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    findItem: (itemToFind) => {\n      return DeniReactTreeviewApiImpl.findItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    getItems: () => {\n      return DeniReactTreeviewApiImpl.getItems(scope);\n    },\n\n    //\n    //\n    //\n    getParentNode: (item) => {\n      return DeniReactTreeviewApiImpl.getParentNode(scope, item);\n    },\n\n\n    //\n    //\n    //\n    getRootItem: () => {\n      return DeniReactTreeviewApiImpl.getRootItem(scope);\n    },\n\n    //\n    //\n    //\n    getSelectedItem: () => {\n      return DeniReactTreeviewApiImpl.getSelectedItem(scope);\n    },\n\n    //\n    //\n    //\n    load: load.bind(scope),\n\n    //\n    //\n    //\n    loadData: loadData.bind(scope),\n\n    //\n    //\n    //\n    removeItem: (id) => {\n      DeniReactTreeviewApiImpl.removeItem(scope, id);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.selectItem(357) //357 is a id value or\n    //  treeviewEl.api.selectItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    selectItem: (itemToFind) => {\n      DeniReactTreeviewApiImpl.selectItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    setTheme: (newTheme) => {\n      setTheme(scope, newTheme);\n    },\n\n  }\n\n}\n\nexport {\n  deniReactTreeviewApi\n}","import React from 'react';\nimport './DeniReactTreeView.scss'\nimport DeniReactTreeViewItem from '../deni-react-treeview-item/DeniReactTreeViewItem'\nimport { deniReactTreeviewApi } from './DeniReactTreeviewApi'\nimport { loadingSetup, setTheme } from './DeniReactTreeviewHelper'\nimport { DeniReactTreeviewProps } from './DeniReactTreeviewProps';\n\n\ninterface DeniReactTreeviewState {\n  loading: boolean,  \n  theme: string,\n  expandAll?: boolean,\n}\n\nclass DeniReactTreeView extends React.Component<DeniReactTreeviewProps, DeniReactTreeviewState> {\n  api: any;\n  container: any;\n\n  constructor(props: DeniReactTreeviewProps) {\n    super(props);\n    this.state = {\n      loading: false,\n      theme: props.theme || 'classic',\n      expandAll: props.expandAll,\n    };\n    this.expandAllFinished = this.expandAllFinished.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { items } = this.props;\n    const rootItem = this.api.getRootItem()\n    if (prevProps.items !== items) {\n      rootItem.children = items;\n      //treeviewHelper.loadData.call(this, this.props.items);\n    }\n    if (prevState.rootItem !== rootItem && this.state.expandAll) {\n      this.expandAllFinished();\n    }\n  }\n\n  componentDidMount() {\n    this.api = deniReactTreeviewApi(this);\n    setTheme(this, this.props.theme || 'classic');\n    loadingSetup(this);\n  }\n\n  expandAllFinished() {\n    this.setState({ expandAll: false });\n  }\n\n  render() {\n    const rootItem = this.api ? this.api.getRootItem() : undefined\n    const domTreeviewItem = (<DeniReactTreeViewItem root={true} treeview={this} level={0} item={rootItem} />);\n    let children = rootItem && rootItem.children;\n    if (children && children.length === 0) {\n      if (this.props.items && this.props.items.length > 0) {\n        children = this.props.items;\n      }\n    }\n    let className = 'deni-react-treeview-container unselectable ' + this.state.theme;\n    if (this.props.className) {\n      className += ' ' + this.props.className;\n    }\n    const hasItems = (children !== undefined && children.length > 0);\n    if (this.state.loading && (!this.props.lazyLoad || !hasItems)) {\n      className += ' loading';\n    }\n    const showComponent = hasItems && (!this.state.loading || this.props.lazyLoad);\n    const style = this.props.style || undefined\n\n    return (\n      (showComponent) ? (\n        <div ref={(elem) => this.container = elem} className={className} style={style} >\n          {domTreeviewItem}\n          {_createComponentsChildren(this, domTreeviewItem, 1, children, this.state.expandAll)}\n        </div>\n      ) : <div className={className}></div>\n    )\n  }\n\n}\n\n//DeniReactTreeView.propTypes = treeviewProps.propTypes;\n//DeniReactTreeView.defaultProps = treeviewProps.defaultProps;\n\nfunction _createComponentsChildren(treeview, parent, level, children, expandAll = false) {\n  if (expandAll) {\n    children = children.map(c => {\n      c.expanded = true;\n      return c;\n    });\n  }\n  return (\n    <div>\n      {\n        (parent.props.item && parent.props.item.expanded && children && children.length) ?\n          children.map(function (child) {\n            const domTreeviewItem = <DeniReactTreeViewItem expandAll={expandAll} treeview={treeview} parent={parent} level={level} key={child.id} item={child} />;\n            return (\n              <div key={child.id}>\n                {domTreeviewItem}\n                {_createComponentsChildren(treeview, domTreeviewItem, level + 1, child.children)}\n              </div>\n            )\n          })\n          : undefined\n      }\n    </div>\n  );\n}\n\nexport default DeniReactTreeView;\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","CHECKBOX_STATE","DeniReactTreeviewApiImpl","scope","text","isLeaf","parentNode","parent","state","selectedItem","rootItem","Error","newItem","children","push","expanded","_selectNode","folderToFind","dataToFind","_normalizeDataToFind","node","_findNode","itemToFind","nodeToFind","_expand","item","forEach","i","_getParentItem","id","api","findNode","childIndex","findIndex","child","splice","setState","undefined","forceUpdate","keys","Object","index","length","allFieldsAreEqual","index2","key","searchInChildren","parentItem","itemsToFind","parent2","normalizedData","parents","currentItem","props","showRoot","_getParentItems","setTimeout","container","selectedRowElem","selectRow","querySelector","selectedElem","closest","scrollIntoViewIfNeeded","onSelectItem","ROOT_ITEM","root","addItem","findFolder","expandAll","findItem","getItems","getParentNode","getRootItem","getSelectedItem","load","bind","loadData","removeItem","selectItem","setTheme","newTheme"],"mappings":"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"}