{"version":3,"file":"lib.cjs.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/components/deni-react-treeview-item/action-buttons/ActionButtons.tsx","../../src/components/deni-react-treeview-item/DeniReactTreeviewItemConsts.ts","../../src/components/deni-react-treeview-item/DeniReactTreeviewItemHelper.tsx","../../src/components/deni-react-treeview-item/DeniReactTreeViewItem.tsx","../../src/components/deni-react-treeview/DeniReactTreeviewApiImpl.ts","../../src/components/deni-react-treeview/DeniReactTreeviewConsts.ts","../../src/components/deni-react-treeview/DeniReactTreeviewHelper.ts","../../src/components/deni-react-treeview/DeniReactTreeviewApi.ts","../../src/components/deni-react-treeview/DeniReactTreeView.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react'\nimport './ActionButtons.scss'\nimport { ActionButtonsProps } from './ActionButtonsProps';\n\nclass ActionButtons extends React.Component<ActionButtonsProps> {\n\n  constructor(props) {\n    super(props)\n  }\n\n  onClick(item, actionButton) {\n    debugger\n    console.log(this.props.onActionButtonClick)\n    alert('sdjçflsjdflkdsjflçkdsj')\n  }\n\n  render() {\n    const actionButtons: JSX.Element[] = this.props.buttons.map((actionButton, index) => {\n      return (\n        <span\n          key={index}\n          className=\"action-button\"\n          onClick={ this.props.onActionButtonClick ? this.props.onActionButtonClick.bind(this, this.props.item, actionButton) : undefined}\n          // onClick={ this.onClick }\n        >\n          {actionButton}\n        </span>\n      );\n    })\n\n    return (\n      <div className=\"action-buttons-container\">\n        <span className=\"action-buttons-container-text\">{this.props.item.text}</span>\n        {actionButtons}\n      </div>\n    )\n  }\n\n}\n\nexport default ActionButtons;","export const  CHECKBOX_STATE = {\n  CHECKED: 1,\n  UNCHECKED: 2,\n  UNDETERMINED: 3\n}\n","import React from 'react'\nimport ActionButtons from \"./action-buttons\";\nimport { CHECKBOX_STATE } from './DeniReactTreeviewItemConsts'\nimport DeniReactTreeView from '../deni-react-treeview/DeniReactTreeView';\n\nconst isSelected = (treeview, item) => {\n  return treeview.state.selectedItem === item;\n}\n\nconst  getClassItem = (treeview, item, level, selectRow) => {\n    const classNames = ['deni-react-treeview-item-container'];\n\n    classNames.push('unselectable');\n\n    if ((item.root === true) && (treeview.props.showRoot === false)) {\n        classNames.push('hidden');\n    } else {\n        classNames.push(treeview.state.theme);\n        classNames.push('level-' + level);\n\n        if (selectRow) {\n            classNames.push('select-row');\n            if (isSelected(treeview, item)) {\n                classNames.push('selected');\n            }\n        }\n    }\n\n    return classNames.join(' ');\n}\n\nconst getClassIcon = (treeview, item) => {\n  const classNames = ['icon'];\n\n  if (treeview.props.showIcon === false) {\n    classNames.push('hidden');      \n  } else {\n    if ((item.isLeaf) && (!(item.children && item.children.length > 0))) { //when it has children, so is no longer has to be leaf\n        classNames.push('isleaf');\n    }\n\n    if (item.expanded) {\n        classNames.push('expanded');\n    }\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassExpandButton = (treeview, treeviewItem, item) => {\n  const classNames = ['expand-button'];\n\n  if (((item.children && item.children.length > 0) || (!item.isLeaf && treeview.props.lazyLoad))) {\n      classNames.push('hasChild');\n\n      if (item.expanded) {\n          classNames.push('expanded');\n      } else {\n          classNames.push('colapsed');\n      }\n  }\n\n  if (treeviewItem.state.loading) {\n      classNames.push('loading');\n  }\n\n  if (isSelected(treeview, item)) {\n      classNames.push('selected');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassCheckbox = (treeview, item) => {\n  const classNames = ['checkbox'];\n\n  if (treeview.props.showCheckbox) {\n      if (item.state === CHECKBOX_STATE.CHECKED) {\n          classNames.push('checked');\n      } else if (item.state === CHECKBOX_STATE.UNDETERMINED) {\n          classNames.push('undetermined');\n      }\n\n      if (isSelected(treeview, item)) {\n          classNames.push('selected');\n      }\n  } else {\n      classNames.push('hidden');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getClassIconAndText = (treeview, item, selectRow) => {\n  const classNames = ['icon-and-text'];\n\n  if (selectRow) {\n      classNames.push('select-row');\n  }\n\n  if ((!selectRow) && (isSelected(treeview, item))) {\n      classNames.push('selected');\n  }\n\n  return classNames.join(' ');\n}\n\nconst getInnerText = (treeview: DeniReactTreeView, item: any): JSX.Element => {\n  if (treeview.props.actionButtons) {\n      return (<ActionButtons \n        onActionButtonClick={treeview.props.onActionButtonClick}\n        buttons={treeview.props.actionButtons}       \n        item={item}\n      />)\n  } else {\n      if (treeview.props.onRenderItem) {\n          return treeview.props.onRenderItem(item, treeview)\n      } else {\n          return item.text;\n      }\n  }\n}\n\nconst treeviewItemContainerDoubleClick = (treeviewItemExpandButtonMouseDown, treeview, selectRow, event) => {\n    /*\n  let canContinue = selectRow;\n\n  if (!canContinue) {\n      const target = event.target;\n      canContinue = ((target.classList.contains('icon-and-text')) || (target.classList.contains('icon')) || (target.classList.contains('text-inner')) || (target.classList.contains('text')));\n  }\n\n  if (canContinue) {\n      const item = this.props.item;\n      if (item.isLeaf) {\n          //TODO: Create a event here\n      } else {\n          treeviewItemExpandButtonMouseDown.apply(this, [treeview, item]);\n      }\n  }\n  */\n}\n\nconst treeviewItemContainerMouseDown = (treeview, item, selectRow, event) => {\n  if (treeview.state.selectedItem !== item) {\n      const target = event.target;\n      const finishRoutine = function () {\n          treeview.setState({\n              selectedItem: item,\n          });\n      };\n\n      if (selectRow) {\n          finishRoutine();\n      } else {\n          if ((target.classList.contains('icon-and-text')) || (target.classList.contains('icon')) || (target.classList.contains('text-inner')) || (target.classList.contains('text') || (target.classList.contains('action-buttons-container-text')))) {\n              finishRoutine();\n          }\n      }\n\n      if (treeview.props.onSelectItem) {\n          const shouldFireEvent = (treeview.props.selectRow && event.target.classList.contains('deni-react-treeview-item-container')) ||\n              (!treeview.props.selectRow && event.target.classList.contains('text-inner'))\n\n\n          if (shouldFireEvent) {\n              treeview.props.onSelectItem(item);\n          }\n      }\n  }\n}\n\nconst treeviewItemExpandButtonMouseDown = (treeview, treeviewItem, item) => {\n  const conclusion = () => {\n      item.expanded = !item.expanded;\n      treeview.setState({ selectedItem: item });\n      treeview.setState({ loading: false });\n      treeviewItem.setState({ loading: false });\n  };\n  const resolveEventOnColapsed = () => {\n      if (treeview.props.onColapsed) {\n          treeview.props.onColapsed(item)\n      }\n  };\n  const resolveEventOnExpanded = () => {\n      if (treeview.props.onExpanded) {\n          treeview.props.onExpanded(item)\n      }\n  };\n\n  if (item.expanded) {\n      conclusion();\n      resolveEventOnColapsed();\n  } else {\n      if (treeview.props.lazyLoad) {\n        treeview.setState({ loading: true });\n        treeviewItem.setState({ loading: true });\n        \n        if (treeview.props.lazyLoad && treeview.props.onLazyLoad) {\n            treeview.props.onLazyLoad(item, (children) => {\n                treeview.api.loadData(treeview, children, item);\n                conclusion();\n            });\n        } else {\n            treeview.api.load(item).then(loadedData => conclusion())\n        }\n\n      } else {\n          conclusion();\n      }\n\n      resolveEventOnExpanded();\n  }\n}\n\nconst treeviewItemCheckboxMouseDown = (treeviewItem, item) => {\n  const resolveEventOnChecked = () => {\n      if (treeviewItem.props.onCheckItem) {\n        treeviewItem.props.onCheckItem(item)\n      }\n  };\n\n  if (_isChecked(item)) {\n      _uncheckNode(treeviewItem, item);\n  } else {\n      _checkNode(treeviewItem, item);\n  }\n\n  treeviewItem.setState({\n      selectedItem: item,\n  });\n\n  resolveEventOnChecked();\n}\n\nconst _checkNode = (treeviewItem, item) => {\n  item.state = CHECKBOX_STATE.CHECKED;\n  _refreshCheckboxStateChildren(item);\n  _refreshCheckboxStateParents(treeviewItem);\n}\n\nconst _uncheckNode = (treeviewItem, item) => {\n  item.state = CHECKBOX_STATE.UNCHECKED;\n  _refreshCheckboxStateChildren(item);\n  _refreshCheckboxStateParents(treeviewItem);\n}\n\nconst _refreshCheckboxStateChildren = item => {\n  if (item.children) {\n      item.children.forEach(function (child) {\n          child.state = item.state;\n          _refreshCheckboxStateChildren(child);\n      });\n  }\n}\n\nconst _allItemsAreChecked = items => {\n  for (let index = 0; index < items.length; index++) {\n      const item = items[index];\n\n      if (!_isChecked(item)) {\n          return false;\n      }\n  }\n  return true;\n}\n\nconst _allItemsAreUnchecked = items => {\n  for (let index = 0; index < items.length; index++) {\n      const item = items[index];\n\n      if (!_isUnchecked(item)) {\n          return false;\n      }\n  }\n  return true;\n}\n\nconst _refreshCheckboxStateParents = treeviewItem => {\n  const parentTreeviewItem = treeviewItem.props.parent;\n  if (parentTreeviewItem) {\n      const siblingItems = parentTreeviewItem.props.item.children;\n      const allSiblingsAreChecked = _allItemsAreChecked(siblingItems);\n\n      //\n      if (allSiblingsAreChecked) {\n          parentTreeviewItem.props.item.state = CHECKBOX_STATE.CHECKED;\n      } else {\n          const allSiblingsAreUnchecked = _allItemsAreUnchecked(siblingItems);\n          if (allSiblingsAreUnchecked) {\n              parentTreeviewItem.props.item.state = CHECKBOX_STATE.UNCHECKED;\n          } else {\n              parentTreeviewItem.props.item.state = CHECKBOX_STATE.UNDETERMINED;\n          }\n      }\n\n\n      _refreshCheckboxStateParents(parentTreeviewItem);\n\n  }\n}\n\nconst _isChecked = item => {\n  return item.state === CHECKBOX_STATE.CHECKED;\n}\n\nconst _isUnchecked = item => {\n  return item.state === CHECKBOX_STATE.UNCHECKED;\n}\n\nexport {\n  getClassItem,\n  getClassIcon,\n  getClassExpandButton,\n  getClassCheckbox,\n  getClassIconAndText,\n  getInnerText,\n  treeviewItemContainerDoubleClick,\n  treeviewItemContainerMouseDown,\n  treeviewItemExpandButtonMouseDown,\n  treeviewItemCheckboxMouseDown\n}","import React from 'react';\nimport './DeniReactTreeViewItem.scss'\n\nimport { \n  getClassItem, \n  getClassIcon, \n  getClassExpandButton, \n  getClassCheckbox, \n  getClassIconAndText,\n  getInnerText,\n  treeviewItemContainerDoubleClick,\n  treeviewItemContainerMouseDown,\n  treeviewItemExpandButtonMouseDown,\n  treeviewItemCheckboxMouseDown\n} from './DeniReactTreeviewItemHelper'\nimport { DeniReactTreeviewItemProps } from './DeniReactTreeViewItemProps';\n\n\nclass DeniReactTreeViewItem extends React.Component<DeniReactTreeviewItemProps> {\n  constructor(props) {\n    super(props);\n    this.state = { loading: false }\n  }\n\n  render() {\n    const { treeview, item, level } = this.props\n    const { selectRow, marginItems } = treeview.props\n    const marginItem = marginItems ? parseInt(marginItems.toString()) : 30\n\n    const marginLeft = 5;\n    const marginLeftItems: number = level === 0 ? 0 : (treeview.props['showRoot'] ? level * marginItem : (level - 1) * marginItem);\n    const cssStyle: any = {\n      paddingLeft: (marginLeft + marginLeftItems) + 'px',\n    }\n    if (!treeview.props['showRoot'] && this.props.root) {\n      cssStyle.display = 'none';\n    }\n\n    return (\n      <div \n        style={cssStyle} \n        className={getClassItem(treeview, item, level, selectRow)} \n        onMouseDown={treeviewItemContainerMouseDown.bind(this, this.props.treeview, item, selectRow)} \n        onDoubleClick={treeviewItemContainerDoubleClick.bind(this, treeviewItemExpandButtonMouseDown, this.props.treeview, this, selectRow)}\n      >\n        <div \n          className={getClassExpandButton(treeview, this, item)} \n          onMouseDown={treeviewItemExpandButtonMouseDown.bind(this, this.props.treeview, this, item)}\n        />\n\n        <div \n          className={getClassCheckbox(treeview, item)} \n          onMouseDown={treeviewItemCheckboxMouseDown.bind(this, this.props.treeview, item)}\n        />\n\n        <div className={getClassIconAndText(treeview, item, selectRow)}>\n          <div className={getClassIcon(treeview, item)}></div>\n          <div className=\"text\">\n            <span className=\"text-inner\">{getInnerText(treeview, item)}</span>\n          </div>\n        </div>\n\n      </div>\n    )\n  }\n\n}\n\nexport default DeniReactTreeViewItem;","\nclass DeniReactTreeviewApiImpl {\n\n  static addItem = (scope, text, isLeaf, parentNode) => {\n    const parent = parentNode || scope.state.selectedItem || scope.state.rootItem;\n    if (!parent) {\n      throw new Error('You must specify a parent node!');\n    }\n    const newItem = {\n      text: text,\n      children: [],\n      isLeaf: isLeaf,\n    }\n    parent.children = parent.children || [];\n    parent.children.push(newItem);\n    parent.expanded = true;\n    _selectNode(scope, newItem);\n\n    return newItem;\n  }\n\n  static findFolder = (scope, folderToFind) => {\n    const dataToFind = _normalizeDataToFind(folderToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node || dataToFind['isLeaf'] === true) {\n      throw new Error('Folder not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findItem = (scope, itemToFind) => {\n    const dataToFind = _normalizeDataToFind(itemToFind);\n    dataToFind['isLeaf'] = true;\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Item not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static findNode = (scope, nodeToFind) => {\n    const dataToFind = _normalizeDataToFind(nodeToFind);\n    const node = _findNode(scope.state.rootItem.children, dataToFind);\n    if (!node) {\n      throw new Error('Node not found!');\n    } else {\n      return node;\n    }\n  }\n\n  static expandAll = (scope) => {\n    _expand(scope.state.rootItem);\n  }\n\n  static getItems = (scope) => {\n    return scope.state.rootItem.children || [];\n  }\n  \n  static getParentNode = (scope, item) => {\n    const currentItem = item || scope.state.selectedItem;\n    return _getParentItem(scope, currentItem);\n  }\n\n  static getRootItem = (scope) => {\n    return scope.state.rootItem;\n  }\n\n  static getSelectedItem = (scope) => {\n    return scope.state.selectedItem;\n  }\n\n  static removeItem = (scope, id) => {\n    const node = scope.api.findNode(id);\n    const parentNode = _getParentItem(scope, node);\n    const childIndex = parentNode.children.findIndex((child) => {\n      return child.id === node.id;\n    });\n\n    parentNode.children.splice(childIndex, 1);\n\n    if (scope.state.selectedItem && scope.state.selectedItem.id === id) {\n      scope.setState({\n        selectedItem: undefined,\n      });\n    }\n\n    scope.forceUpdate();\n  }\n\n  static selectItem = (scope, itemToFind) => {\n    const item = scope.api.findNode(itemToFind);\n    if (item) {\n      _selectNode(scope, item);\n    } else {\n      throw new Error('Item not found.');\n    }\n  }\n\n}\n\nfunction _findNode(children, dataToFind) {\n  const keys = dataToFind ? Object.keys(dataToFind) : []\n  for (let index = 0; index < children.length; index++) {\n    const child = children[index];\n    let allFieldsAreEqual = true;\n\n    for (let index2 = 0; index2 < keys.length; index2++) {\n      const key = keys[index2];\n\n      if (child[key] !== dataToFind[key]) {\n        allFieldsAreEqual = false;\n      }\n    }\n\n    if (allFieldsAreEqual) {\n      return child;\n    }\n\n    if (child.children) {\n      const searchInChildren = _findNode(child.children, dataToFind);\n      if (searchInChildren) {\n        return searchInChildren;\n      }\n    }\n  }\n  return null;\n}\n\n//\nfunction _getParentItems(scope, item) {\n  const parents: any[] = [];\n  let currentItem = item;\n  while (true) {\n    currentItem = _getParentItem(scope, currentItem);\n    if (currentItem) {\n      if ((currentItem.root) && (!scope.props.showRoot)) {\n        break;\n      } else {\n        parents.push(currentItem);\n      }\n    } else {\n      break;\n    }\n  }\n  return parents;\n}\n\n//\nfunction _getParentItem(scope, item, parentItem?) {\n  const parent = parentItem || scope.state.rootItem;\n  const itemsToFind = parent.children;\n  for (let index = 0; index < itemsToFind.length; index++) {\n    const itemToFind = itemsToFind[index];\n    if (itemToFind.id === item.id) {\n      return parent;\n    }\n    if (itemToFind.children) {\n      const parent2 = _getParentItem(scope, item, itemToFind);\n      if (parent2) {\n        return parent2;\n      }\n    }\n  }\n  // if (item.parent === scope.state.rootItem.id) {\n  //   if (scope.props.showRoot) {\n  //     return scope.state.rootItem;\n  //   } else {\n  //     return undefined;\n  //   }\n  // } else {\n  //   let parentItem = vm.findFolder(scope, item.parent);\n  //   return parentItem;\n  // }\n}\n\n//\nfunction _normalizeDataToFind(dataToFind) {\n  let normalizedData = {};\n  if ((typeof dataToFind === 'number') || (typeof dataToFind === 'string')) {\n    normalizedData['id'] = dataToFind;\n  } else if (typeof dataToFind === 'object') {\n    normalizedData = dataToFind;\n  } else {\n    throw new Error('Parameter set in a wrong way.');\n  }\n  return normalizedData;\n}\n\n//\nfunction _selectNode(scope, item) {\n  const parentItems = _getParentItems(scope, item);\n  parentItems.forEach(function (parent) {\n    if (!parent.expanded) {\n      parent.expanded = true;\n    }\n  });\n  scope.setState({\n    selectedItem: item,\n  });\n  setTimeout(() => {\n    if (scope.container) {\n      let selectedRowElem\n      if (scope.props.selectRow) {\n        selectedRowElem = scope.container.querySelector('.deni-react-treeview-item-container.selected')\n      } else {\n        const selectedElem = scope.container.querySelector('.icon-and-text.selected')\n        if (selectedElem) {\n          selectedRowElem = selectedElem.closest('.deni-react-treeview-item-container')\n        }\n      }\n      if (selectedRowElem) {\n        selectedRowElem.scrollIntoViewIfNeeded()\n      }\n    }\n  })\n  if (scope.props.onSelectItem) {\n    scope.props.onSelectItem(item);\n  }\n}\n\nfunction _expand(item) {\n  if (item.children) {\n    item.children.forEach((i) => {\n      if (i.children) {\n        i.expanded = true;\n        _expand(i);\n      }\n    });\n  }\n}\n\n\nexport default DeniReactTreeviewApiImpl","export const  ROOT_ITEM = {\n  id: -1,\n  text: 'root',\n  expanded: true,\n  root: true\n}","import {ROOT_ITEM} from './DeniReactTreeviewConsts'\nimport axios from 'axios';\n\nconst loadingSetup = treeview => {\n  //by props.url\n  if (treeview.props.url || treeview.props.json || treeview.props.lazyLoad) {\n    if (treeview.props.autoLoad !== false) {\n      treeview.api.load();\n    }\n  } else {\n    //by props.items\n    if (treeview.props.items) {\n      treeview.api.loadData(treeview, treeview.props.items);\n    }\n  }\n}\n\nconst setTheme = (treeview, newTheme) => {\n  const theme = newTheme || 'classic';\n  require('../styles/themes/' + theme + '-theme.scss')\n  treeview.setState({ theme });\n}\n\nconst load = (treeview, item) => {\n  treeview.setState({\n    loading: true\n  });\n\n  return new Promise(function(success, reject) {\n\n    if (treeview.props.url || treeview.props.json) {\n      let urlToLoad = treeview.props.url || treeview.props.json;\n      if (treeview.props.lazyLoad) {\n        const currentItem = item || treeview.state.rootItem || ROOT_ITEM;\n        delete currentItem['children'];\n        urlToLoad += '?lazyLoad=true&item=' + JSON.stringify(currentItem);\n      }\n\n      axios.get(urlToLoad)\n        .then(res => {\n          treeview.setState({\n            loading: false\n          });\n          treeview.api.loadData(treeview, res.data, item);\n          success(res.data);\n        })\n        .catch(error => {\n          console.error(`Error loading data: ${error.message}`)\n        })\n    } else if (treeview.props.lazyLoad) {\n      treeview.setState({\n        loading: false\n      });\n      reject('TODO: under construction');\n    } else {\n      treeview.setState({\n        loading: false\n      });\n      const msg = 'To use load function you must define lazyLoad:true or a valid url.';\n      console.error(msg);\n      reject(msg);\n    }\n  });\n}\n\n//\n// item is a optional param that when it is set data must be an array (children)\n//\nconst loadData = (treeview, data, item) => {\n  //\n  const dataToLoad = data || [];\n\n  //onBeforeLoad event\n  if (treeview.props.onBeforeLoad) {\n    treeview.props.onBeforeLoad(dataToLoad, item);\n  }\n\n  //\n  if (item) {\n    //\n    if (dataToLoad instanceof Array) {\n      item.children = dataToLoad;\n    } else {\n      throw new Error('When item param is set the data must be an array.');\n    }\n  } else {\n    treeview.setState({\n      rootItem: _resolveRootItem(dataToLoad)\n    });\n  }\n\n  //onAfterLoad event\n  if (treeview.props.onAfterLoad) {\n    treeview.props.onAfterLoad(dataToLoad, item);\n  }\n\n}\n\nfunction _resolveRootItem(items) {\n  let rootItem = Object.assign({}, ROOT_ITEM);\n\n  if (items) {\n    if (items instanceof Array) {\n      rootItem['children'] = items;\n    } else if (items instanceof Object) {\n      rootItem = items;\n    } else {\n      throw new Error('Parameter \"items\" adjusted in a wrong way.');\n    }\n    return rootItem;\n  }\n  return null;\n}\n\nexport {\n  loadingSetup,\n  setTheme,\n  load,\n  loadData\n};","import DeniReactTreeviewApiImpl from './DeniReactTreeviewApiImpl'\nimport { load, loadData, setTheme } from './DeniReactTreeviewHelper'\n\nconst deniReactTreeviewApi = scope => {\n  return {\n\n    //\n    //\n    //\n    addItem: (text, isLeaf, parentNode) => {\n      return DeniReactTreeviewApiImpl.addItem(scope, text, isLeaf, parentNode);\n    },\n\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findFolder: (folderToFind) => {\n      return DeniReactTreeviewApiImpl.findFolder(scope, folderToFind);\n    },\n\n    //\n    // Expand all the children from the rootItem recursively\n    expandAll: () => {\n      DeniReactTreeviewApiImpl.expandAll(scope);\n    },\n    //\n    // folderToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findFolder(456) //456 is a id value or\n    //  treeviewEl.api.findFolder({name: 'Brazil'}) //it will searches for the first folder that match the passed data and leaf is not true\n    //\n    findNode: (nodeToFind) => {\n      return DeniReactTreeviewApiImpl.findNode(scope, nodeToFind);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.findItem(357) //357 is a id value or\n    //  treeviewEl.api.findItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    findItem: (itemToFind) => {\n      return DeniReactTreeviewApiImpl.findItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    getItems: () => {\n      return DeniReactTreeviewApiImpl.getItems(scope);\n    },\n\n    //\n    //\n    //\n    getParentNode: (item) => {\n      return DeniReactTreeviewApiImpl.getParentNode(scope, item);\n    },\n\n\n    //\n    //\n    //\n    getRootItem: () => {\n      return DeniReactTreeviewApiImpl.getRootItem(scope);\n    },\n\n    //\n    //\n    //\n    getSelectedItem: () => {\n      return DeniReactTreeviewApiImpl.getSelectedItem(scope);\n    },\n\n    //\n    //\n    //\n    load: item => load(scope, item),  \n\n    //\n    //\n    //\n    loadData: loadData.bind(scope),\n\n    //\n    //\n    //\n    removeItem: (id) => {\n      DeniReactTreeviewApiImpl.removeItem(scope, id);\n    },\n\n    //\n    // itemToFind can be passed as a \"id\" or as a \"object\" ex:\n    //\n    //  treeviewEl.api.selectItem(357) //357 is a id value or\n    //  treeviewEl.api.selectItem({name: 'Dog'}) //it will searches for the first item that match the passed data and leaf is true\n    //\n    selectItem: (itemToFind) => {\n      DeniReactTreeviewApiImpl.selectItem(scope, itemToFind);\n    },\n\n    //\n    //\n    //\n    setTheme: (newTheme) => {\n      setTheme(scope, newTheme);\n    },\n\n  }\n\n}\n\nexport {\n  deniReactTreeviewApi\n};","import React from 'react';\nimport './DeniReactTreeView.scss'\nimport DeniReactTreeViewItem from '../deni-react-treeview-item/DeniReactTreeViewItem'\nimport { deniReactTreeviewApi } from './DeniReactTreeviewApi'\nimport { loadingSetup, setTheme } from './DeniReactTreeviewHelper'\nimport { DeniReactTreeviewProps } from './DeniReactTreeviewProps';\n\n\ninterface DeniReactTreeviewState {\n  loading: boolean,  \n  theme: string,\n  expandAll?: boolean,\n}\n\nclass DeniReactTreeView extends React.Component<DeniReactTreeviewProps, DeniReactTreeviewState> {\n  api: any;\n  container: any;\n\n  constructor(props: DeniReactTreeviewProps) {\n    super(props);\n    this.state = {\n      loading: false,\n      theme: props.theme || 'classic',\n      expandAll: props.expandAll,\n    };\n    this.expandAllFinished = this.expandAllFinished.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { items } = this.props;\n    const rootItem = this.api.getRootItem()\n    if (prevProps.items !== items) {\n      rootItem.children = items;\n      //treeviewHelper.loadData.call(this, this.props.items);\n    }\n    if (prevState.rootItem !== rootItem && this.state.expandAll) {\n      this.expandAllFinished();\n    }\n  }\n\n  componentDidMount() {\n    this.api = deniReactTreeviewApi(this);\n    setTheme(this, this.props.theme || 'classic');\n    loadingSetup(this);\n  }\n\n  expandAllFinished() {\n    this.setState({ expandAll: false });\n  }\n\n  render() {\n    const rootItem = this.api ? this.api.getRootItem() : undefined\n    const domTreeviewItem = (<DeniReactTreeViewItem root={true} treeview={this} level={0} item={rootItem} />);\n    let children = rootItem && rootItem.children;\n    if (children && children.length === 0) {\n      if (this.props.items && this.props.items.length > 0) {\n        children = this.props.items;\n      }\n    }\n    let className = 'deni-react-treeview-container unselectable ' + this.state.theme;\n    if (this.props.className) {\n      className += ' ' + this.props.className;\n    }\n    const hasItems = (children !== undefined && children.length > 0);\n    if (this.state.loading && (!this.props.lazyLoad || !hasItems)) {\n      className += ' loading';\n    }\n    const showComponent = hasItems && (!this.state.loading || this.props.lazyLoad);\n    const style = this.props.style || undefined\n\n    return (\n      (showComponent) ? (\n        <div ref={(elem) => this.container = elem} className={className} style={style} >\n          {domTreeviewItem}\n          {_createComponentsChildren(this, domTreeviewItem, 1, children, this.state.expandAll)}\n        </div>\n      ) : <div className={className}></div>\n    )\n  }\n\n}\n\n//DeniReactTreeView.propTypes = treeviewProps.propTypes;\n//DeniReactTreeView.defaultProps = treeviewProps.defaultProps;\n\nfunction _createComponentsChildren(treeview, parent, level, children, expandAll = false) {\n  if (expandAll) {\n    children = children.map(c => {\n      c.expanded = true;\n      return c;\n    });\n  }\n  return (\n    <div>\n      {\n        (parent.props.item && parent.props.item.expanded && children && children.length) ?\n          children.map(function (child) {\n            const domTreeviewItem = <DeniReactTreeViewItem \n              expandAll={expandAll} \n              treeview={treeview} \n              parent={parent} \n              level={level} \n              item={child}\n            />;\n            return (\n              <div key={child.id}>\n                {domTreeviewItem}\n                {_createComponentsChildren(treeview, domTreeviewItem, level + 1, child.children)}\n              </div>\n            )\n          })\n          : undefined\n      }\n    </div>\n  );\n}\n\nexport default DeniReactTreeView;"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","props","_super","__extends","ActionButtons","item","actionButton","console","log","this","onActionButtonClick","alert","actionButtons","buttons","map","index","React","key","className","onClick","_this","bind","undefined","text","Component","CHECKBOX_STATE","isSelected","treeview","state","selectedItem","getClassItem","level","selectRow","classNames","push","root","showRoot","theme","join","getClassIcon","showIcon","children","length","expanded","getClassExpandButton","treeviewItem","isLeaf","lazyLoad","loading","getClassCheckbox","showCheckbox","getClassIconAndText","treeviewItemContainerDoubleClick","treeviewItemExpandButtonMouseDown","event","treeviewItemContainerMouseDown","target","finishRoutine","setState","classList","contains","onSelectItem","conclusion","onColapsed","onLazyLoad","api","loadData","load","then","loadedData","onExpanded","treeviewItemCheckboxMouseDown","_isChecked","_uncheckNode","_checkNode","onCheckItem","_refreshCheckboxStateChildren","_refreshCheckboxStateParents","forEach","child","parentTreeviewItem","parent","siblingItems","items","_allItemsAreChecked","allSiblingsAreUnchecked","_isUnchecked","_allItemsAreUnchecked","DeniReactTreeViewItem","_a","_b","marginItems","marginItem","parseInt","toString","cssStyle","paddingLeft","display","onMouseDown","onDoubleClick","onRenderItem","getInnerText","DeniReactTreeviewApiImpl","scope","parentNode","rootItem","Error","newItem","_selectNode","folderToFind","dataToFind","_normalizeDataToFind","node","_findNode","itemToFind","nodeToFind","_expand","i","_getParentItem","id","findNode","childIndex","findIndex","splice","forceUpdate","keys","Object","allFieldsAreEqual","index2","searchInChildren","parentItem","itemsToFind","parent2","normalizedData","parents","currentItem","_getParentItems","setTimeout","container","selectedRowElem","querySelector","selectedElem","closest","scrollIntoViewIfNeeded","ROOT_ITEM","setTheme","newTheme","require","data","dataToLoad","onBeforeLoad","Array","_resolveRootItem","onAfterLoad","assign","deniReactTreeviewApi","addItem","findFolder","expandAll","findItem","getItems","getParentNode","getRootItem","getSelectedItem","Promise","success","reject","url","json","urlToLoad","JSON","stringify","axios","get","res","catch","error","message","msg","removeItem","selectItem","expandAllFinished","DeniReactTreeView","prevProps","prevState","autoLoad","domTreeviewItem","hasItems","showComponent","elem","_createComponentsChildren","c"],"mappings":"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"}